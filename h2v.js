// Generated by CoffeeScript 1.10.0

/**
 * 转换 html 到 virtual Dom 
 * @date 2016-01-08 20:12:21
 * @author vfasky <vfasky@gmail.com>
 * @link http://vfasky.com
 */
'use strict';
var _domId, _preNS, _signReg, _strEndReg, bNS, domToScript, htmlparser, parseDom, parseTree, parserAttr, parserAttrEach, parserAttrFor, parserAttrIf, parserAttrUnless, parserFormatters;

htmlparser = require('htmlparser2');

_domId = 0;

_preNS = '__mc__';

_signReg = /\{([^}]+)\}/g;

_strEndReg = /[^]+""$/;

bNS = function(len) {
  var i;
  return ((function() {
    var j, ref, results;
    results = [];
    for (i = j = 0, ref = len * 4; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      results.push('');
    }
    return results;
  })()).join(' ');
};


/* 
 * 解释 <div mc-each-v="scope.list"></div>
 */

parserAttrEach = function(code, dom, ix, attrKey) {
  var _arr, _ix, _vName;
  delete dom.attribs[attrKey];
  _ix = _preNS + '$ix_';
  _arr = code;
  _vName = attrKey.replace('mc-each-', '');
  return "\n" + (bNS(ix + 1)) + " // each " + attrKey + " = " + code + "\n" + (bNS(ix + 1)) + " var " + _preNS + "arr = " + _arr + " || [];\n" + (bNS(ix + 1)) + " for(var " + _ix + "=0, len=" + _preNS + "arr.length; " + _ix + " < len; " + _ix + "++){\n" + (bNS(ix + 1)) + "     var " + _vName + " = " + _preNS + "arr[" + _ix + "];\n" + (bNS(ix + 1)) + "     " + (parseDom(dom, ix + 1)) + "\n" + (bNS(ix + 1)) + " }// endEach\n";
};


/* 
 * 解释 <div mc-for="v, k in scope.list"></div>
 */

parserAttrFor = function(code, dom, ix) {
  var _arr, _ix, _key, _obj, _vName, _val, script;
  delete dom.attribs['mc-for'];
  script = '';
  if (code.indexOf(' in ') !== -1) {
    _ix = _preNS + '$ix_';
    _arr = code.split(' in ').pop();
    _vName = code.split(' ')[0].replace(',', '');
    if (code.indexOf(',') !== -1) {
      _ix = code.split(',').pop().split(' in')[0].trim();
    }
    script = "\n" + (bNS(ix + 1)) + " // for " + code + "\n" + (bNS(ix + 1)) + " var " + _preNS + "arr = " + _arr + " || [];\n" + (bNS(ix + 1)) + " for(var " + _ix + "=0, len=" + _preNS + "arr.length; " + _ix + " < len; " + _ix + "++){\n" + (bNS(ix + 1)) + "     var " + _vName + " = " + _preNS + "arr[" + _ix + "];\n" + (bNS(ix + 1)) + "     " + (parseDom(dom, ix + 1)) + "\n";
  } else if (code.indexOf(' of ') !== -1) {
    _key = code.split(' of ')[0];
    _obj = code.split(' of ').pop();
    _val = '_';
    if (_key.indexOf(',') !== -1) {
      _val = _key.split(',').pop();
      _key = _key.split(',')[0];
    }
    script = "\n" + (bNS(ix + 1)) + " // for " + code + "\n" + (bNS(ix + 1)) + " var " + _preNS + "obj = " + _obj + " || {};\n" + (bNS(ix + 1)) + " for(var " + _key + " in " + _preNS + "obj){\n" + (bNS(ix + 1)) + "     var " + _val + " = " + _preNS + "obj[" + _key + "] || {};\n" + (bNS(ix + 1)) + "     " + (parseDom(dom, ix + 1)) + "\n";
  }
  return script += (bNS(ix + 1)) + " } // endFor \n";
};


/* 
 * 解释 if
 */

parserAttrIf = function(code, dom, ix) {
  var script;
  script = '';
  delete dom.attribs['mc-if'];
  return script = "\n" + (bNS(ix + 1)) + " // if " + code + "\n" + (bNS(ix + 1)) + " if( " + code + " ){\n" + (bNS(ix + 1)) + "    " + (parseDom(dom, ix + 1)) + "\n" + (bNS(ix + 1)) + " }// endif \n";
};


/* 
 * 解释 unless
 */

parserAttrUnless = function(code, dom, ix) {
  var script;
  script = '';
  delete dom.attribs['mc-unless'];
  return script = "\n" + (bNS(ix + 1)) + " // if " + code + "\n" + (bNS(ix + 1)) + " if( !(" + code + ") ){\n" + (bNS(ix + 1)) + "    " + (parseDom(dom, ix + 1)) + "\n" + (bNS(ix + 1)) + " }// endif \n";
};


/* 
 * 解释属性
 */

parserAttr = function(attribs, ix) {
  var attr, script;
  script = '';
  attr = Object.keys(attribs);
  attr.forEach(function(key) {
    var val;
    val = attribs[key];
    if (key.indexOf('mc-') === 0) {
      key = key.replace('mc-', '');
      return script += "" + (parserFormatters(val, "attr['" + key + "']", ix));
    } else {
      return script += (bNS(ix + 1)) + " attr['" + key + "'] = '" + val + "';";
    }
  });
  return script + '\n';
};

parserFormatters = function(key, valName, ix) {
  var domVal, funcs, script;
  key = key.trim();
  if (key.indexOf('|') === -1) {
    return (bNS(ix + 1)) + " " + valName + " = " + key + "; \n";
  }
  funcs = key.split(' | ');
  domVal = funcs[0];
  funcs.splice(0, 1);
  script = "    \n" + (bNS(ix + 1)) + " " + valName + " = (function(x){\n    ";
  funcs.forEach(function(fun) {
    var args, formatter;
    args = [];
    fun.split(' ').forEach(function(v) {
      var val;
      val = v.trim();
      if (val.length > 0) {
        return args.push(val);
      }
    });
    formatter = args[0];
    args[0] = 'x';
    return script += (bNS(ix + 2)) + " // " + formatter + "\n" + (bNS(ix + 2)) + " if( formatters.hasOwnProperty('" + formatter + "') ) {\n" + (bNS(ix + 2)) + "     x = formatters['" + formatter + "'](" + (args.join(',')) + ");\n" + (bNS(ix + 2)) + " } // end " + formatter + " \n";
  });
  script += (bNS(ix + 2)) + " return x;\n" + (bNS(ix + 1)) + " })(" + domVal + ");\n";
  return script;
};


/*
 * 解释dom结构
 */

parseDom = function(dom, ix) {
  var attr, attrKeys, code, id, j, len1, mapTree, mapTreeId, script, text;
  id = _domId++;
  script = "\n" + (bNS(ix + 1)) + " var children_" + id + " = [], attr = {};\n";
  if (dom.attribs) {
    if (dom.attribs['mc-for']) {
      return parserAttrFor(dom.attribs['mc-for'], dom, ix);
    }
    if (dom.attribs['mc-if']) {
      return parserAttrIf(dom.attribs['mc-if'], dom, ix);
    }
    if (dom.attribs['mc-unless']) {
      return parserAttrUnless(dom.attribs['mc-unless'], dom, ix);
    }
    attrKeys = Object.keys(dom.attribs);
    for (j = 0, len1 = attrKeys.length; j < len1; j++) {
      attr = attrKeys[j];
      if (attr.indexOf('mc-each-') === 0) {
        return parserAttrEach(dom.attribs[attr], dom, ix, attr);
      }
    }
    script += parserAttr(dom.attribs, ix);
  }
  if (dom.children && dom.children.length > 0) {
    script += parseTree(dom.children, ix, "children_" + id);
  }
  if (dom.name) {
    script += "\n" + (bNS(ix + 1)) + " tree.push( el('" + dom.name + "', attr, children_" + id + ") );";
  } else if (dom.type === 'text') {
    dom.data = dom.data.replace(/\n/g, ' ');
    text = dom.data;
    if (_signReg.test(text)) {
      mapTree = [];
      mapTreeId = 0;
      code = text.replace(_signReg, function(key, val) {
        var reKey;
        reKey = _preNS + "rp__key_" + (mapTreeId++);
        script += "\n" + (bNS(ix + 1)) + " var " + reKey + ";";
        mapTree.push({
          key: reKey,
          val: val
        });
        return '" + ' + reKey + ' + "';
      });
      code = '"' + code;
      if (false === _strEndReg.test(code)) {
        code += '"';
      }
      mapTree.forEach(function(v) {
        return script += "\n" + (parserFormatters(v.val, v.key, ix));
      });
      script += "\n" + (bNS(ix + 1)) + " tree.push( " + code + " );";
    } else {
      script += "\n" + (bNS(ix + 1)) + " tree.push( '" + dom.data + "' );";
    }
  }
  return script;
};

parseTree = function(tree, ix, children) {
  var script, treeId;
  if (ix == null) {
    ix = 0;
  }
  if (children == null) {
    children = 'children_0';
  }
  treeId = _domId;
  script = "\n" + (bNS(ix + 1)) + " (function(scope, tree){ // startTree " + treeId + "\n";
  tree.forEach(function(dom, id) {
    if (dom.type !== 'text' || (dom.type === 'text' && dom.data.trim().length > 0)) {
      return script += "" + (parseDom(dom, ix + 1));
    }
  });
  script += "\n" + (bNS(ix + 1)) + " })(scope, " + children + "); // endTree " + treeId + "\n";
  return script;
};

domToScript = function(tree) {
  var script;
  script = "'use strict'\nvar mcore = require('mcore');\nvar el = mcore.virtualDom.el;\nvar formatters = mcore.Template.formatters;\n \nmodule.exports = function(scope){\n    var children_0 = [];";
  script += "\n    " + (parseTree(tree));
  script += "\n    return el('div', {'class': 'mc-vd'}, children_0);\n};";
  return script;
};

module.exports = function(html) {
  var domTree;
  _domId = 0;
  domTree = htmlparser.parseDOM(html);
  return domToScript(domTree);
};
